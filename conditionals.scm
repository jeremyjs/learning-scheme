; test env
(load "test-env.scm")

; main
(define (my-abs x)
  (if (negative? x)
    (- x) x))

(test eqv? (my-abs -2) 2)
(test eqv? (my-abs 0) 0)
(test eqv? (my-abs 2) 2)

(define (recip x)
  (if (zero? x)
    #f (/ x)))
(test eqv? (recip 2) 1/2)
(test eqv? (recip 1/2) 2)
(test eqv? (recip 0) #f)
(test eqv? (recip 3/2) 2/3)
(test eqv? (recip 6/4) 2/3)

(define (int->ascii c)
  (if (<= 33 c 126)
    (integer->char c) #f))
(test eqv? (int->ascii 33) #\!)
(test eqv? (int->ascii 126) #\~)
(test eqv? (int->ascii 32) #f)
(test eqv? (int->ascii 127) #f)

(define (prod3and x y z)
  (and (positive? x)
       (positive? y)
       (positive? z)
       (* x y z)))
(test eqv? (prod3and 1 2 3) 6)
(test eqv? (prod3and -1 2 3) #f)
(test eqv? (prod3and -1 -2 3) #f)
(test eqv? (prod3and -1 -2 -3) #f)

(define (prod3or x y z)
  (if (or (negative? x)
          (negative? y)
          (negative? z))
      (* x y z) #f))
(test eqv? (prod3or 1 2 3) #f)
(test eqv? (prod3or -1 2 3) -6)
(test eqv? (prod3or 1 -2 3) -6)
(test eqv? (prod3or -1 -2 -3) -6)

; returns letter grade for a given score (%)
(define (grade score)
  (cond
    ((>= score 90) "A")
    ((<= 80 score 89) "B")
    ((<= 70 score 79) "C")
    ((<= 60 score 69) "D")
    ((< score 60) "F")))
(test equal? (grade 90) "A")
(test equal? (grade 80) "B")
(test equal? (grade 70) "C")
(test equal? (grade 60) "D")
(test equal? (grade 59) "F")

