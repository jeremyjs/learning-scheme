; main
(define (my-abs x)
  (if (negative? x)
    (- x) x))
(write (eqv? (my-abs -2) 2))
(write (eqv? (my-abs 0) 0))
(write (eqv? (my-abs 2) 2))

(define (recip x)
  (if (zero? x)
    #f (/ x)))
(write (eqv? (recip 2) 1/2))
(write (eqv? (recip 1/2) 2))
(write (eqv? (recip 0) #f))
(write (eqv? (recip 3/2) 2/3))
(write (eqv? (recip 6/4) 2/3))

(define (int->ascii c)
  (if (<= 33 c 126)
    (integer->char c) #f))
(write (eqv? (int->ascii 33) #\!))
(write (eqv? (int->ascii 126) #\~))
(write (eqv? (int->ascii 32) #f))
(write (eqv? (int->ascii 127) #f))

(define (prod3and x y z)
  (and (positive? x)
       (positive? y)
       (positive? z)
       (* x y z)))
(write (eqv? (prod3and 1 2 3) 6))
(write (eqv? (prod3and -1 2 3) #f))
(write (eqv? (prod3and -1 -2 3) #f))
(write (eqv? (prod3and -1 -2 -3) #f))

(define (prod3or x y z)
  (if (or (negative? x)
          (negative? y)
          (negative? z))
      (* x y z) #f))
(write (eqv? (prod3or 1 2 3) #f))
(write (eqv? (prod3or -1 2 3) -6))
(write (eqv? (prod3or 1 -2 3) -6))
(write (eqv? (prod3or -1 -2 -3) -6))

; returns letter grade for a given score (%)
(define (grade score)
  (cond
    ((>= score 90) "A")
    ((<= 80 score 89) "B")
    ((<= 70 score 79) "C")
    ((<= 60 score 69) "D")
    ((< score 60) "F")))
(write (equal? (grade 90) "A"))
(write (equal? (grade 80) "B"))
(write (equal? (grade 70) "C"))
(write (equal? (grade 60) "D"))
(write (equal? (grade 59) "F"))

